{\rtf1\ansi\ansicpg936\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
  public List<Integer> topKFrequent(int[] nums, int k) \{\
    // build hash map : character and how often it appears\
    HashMap<Integer, Integer> count = new HashMap();\
    for (int n: nums) \{\
      count.put(n, count.getOrDefault(n, 0) + 1);\
    \}\
\
    // init heap 'the less frequent element first'\
    PriorityQueue<Integer> heap =\
            new PriorityQueue<Integer>((n1, n2) -> count.get(n1) - count.get(n2));\
\
    // keep k top frequent elements in the heap\
    for (int n: count.keySet()) \{\
      heap.add(n);\
      if (heap.size() > k)\
        heap.poll();\
    \}\
\
    // build output list\
    List<Integer> top_k = new LinkedList();\
    while (!heap.isEmpty())\
      top_k.add(heap.poll());\
    Collections.reverse(top_k);\
    return top_k;\
  \}\
\}}