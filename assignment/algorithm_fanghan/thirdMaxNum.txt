1.O(nlogn)
public int thirdMax(int[] nums) {
        HashMap<Integer,Integer> test=new HashMap<Integer, Integer>();
        Arrays.sort(nums);
        int result=0;
        for(int i=nums.length-1;i>=0;i--){
            if(test.containsKey(nums[i])){
                continue;
            }else{
                test.put(nums[i],i);
                if(test.size()==3){
                    result=nums[i];
                    break;
                }
            }
        }
        if (test.size()<3)
            result=nums[nums.length-1];
        return result;
}

2.O(n)
public int thirdMax(int[] nums) {
        long first= Long.MIN_VALUE, second=Long.MIN_VALUE, third=Long.MIN_VALUE;
        for(int n:nums){
            if (n > first) {
                third = second;
                second = first;
                first = n;
            } else if (n > second && n < first) {
                third = second;
                second = n;
            } else if (n > third && n < second) {
                third = n;
            }
        }
        return (int) ((third == Long.MIN_VALUE || third == second) ? first : third);
}