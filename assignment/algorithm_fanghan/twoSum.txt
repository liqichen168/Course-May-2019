1.O(n^2)
public int[] twoSum(int[] nums, int target) {
        int[]two=new int[2];
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                	two[0]=i;
                	two[1]=j;
                }
            }
        }
        return two;
}
2.O(n)
public int[] twoSum(int[] nums, int target) {	
        int[] result=new int[2];
        HashMap<Integer,Integer> test = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(test.containsKey(nums[i])){
                int index = test.get(nums[i]);
                result[0]=index;
                result[1]=i;
            }else{
                test.put(target-nums[i],i);
            }
        }
        return result;
    }
}
